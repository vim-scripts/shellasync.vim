shellasync.vim for Vim version 7.0+   Last change: 27 August, 2012

Maintainer: Dmitry "troydm" Geurkov <d.geurkov@gmail.com>
Version: 0.3.3
Description: shellasync.vim plugin allows you to execute shell commands
asynchronously inside vim and see output in seperate buffer window.
Last Change: 27 August, 2012
License: Vim License (see :help license)
Website: https://github.com/troydm/shellasync.vim

Help on using shellasync.vim                                      *shellasync.vim*

1. Introduction                    |shellasync.vim-intro|
2. Configuration                   |shellasync.vim-configuration|
2. Usage                           |shellasync.vim-usage|

============================================================================================
 1. INTRODUCTION                                                  *shellasync.vim-intro*

shellasync.vim plugin allows you to asynchronously execute shell commands inside vim 
and see output inside a seperate window buffer without waiting for a command to finish.
It uses python's subprocess and threading capabilities to execute shell commands in seperate
thread and non-blockingly get the output as the command executes

Note: this plugin is highly experimental, so it might make your vim process unstable

Platform: 
    only unix based operating systems are supported

Requirements: 
    vim compiled with python support

============================================================================================
 2. CONFIGURATION                                         *shellasync.vim-configuration*

                                                         *g:shellasync_print_return_value*
g:shellasync_print_return_value     (Default: '1')
    Print command's return value when command finishes it's execution

============================================================================================
 2. USAGE                                                         *shellasync.vim-usage*

                                                                  *Shell*
:Shell[!] {command}
    Execute a {command} in shell and opens a window to see it's output.
    If same {command} is currently executing it sends |ShellTerm| to it's associated process id
    If [!] is specified, command is expanded using |expand()| function before execution
    Note: you can have only one {command} executing at the same time, because it is linked
    to a buffer with a same name, if buffer is wipedout/closed before command finished executing
    SIGTERM is automaticly sent to the process id that is executing the command using |ShellTerm|

                                                                  *ShellTerm*
:ShellTerm[!] {command}
    If {command} is currently executing, sends a SIGTERM signal to it's associated process id
    If [!] is specified, command is expanded using |expand()| function

                                                                  *ShellKill*
:ShellKill[!] {command}
    If {command} is currently executing, sends a SIGKILL signal to it's associated process id
    If [!] is specified, command is expanded using |expand()| function

                                                                  *ShellsRunning*
:ShellsRunning
    prints currently running shell commands with associated process ids

 vim:tw=78:ts=8:ft=help:norl:
