shellasync.vim for Vim version 7.0+   Last change: 8 September, 2012

Maintainer: Dmitry "troydm" Geurkov <d.geurkov@gmail.com>
Version: 0.3.4
Description: shellasync.vim plugin allows you to execute shell commands
asynchronously inside vim and see output in seperate buffer window.
Last Change: 8 September, 2012
License: Vim License (see :help license)
Website: https://github.com/troydm/shellasync.vim

Help on using shellasync.vim                                      *shellasync.vim*

1. Introduction                    |shellasync.vim-intro|
2. Configuration                   |shellasync.vim-configuration|
2. Usage                           |shellasync.vim-usage|

============================================================================================
 1. INTRODUCTION                                                  *shellasync.vim-intro*

shellasync.vim plugin allows you to asynchronously execute shell commands inside vim 
and see output inside a seperate window buffer without waiting for a command to finish.
It uses python's subprocess and threading capabilities to execute shell commands in seperate
thread and non-blockingly get the output as the command executes

Note: this plugin is highly experimental, so it might make your vim process unstable

Platform: 
    only unix based operating systems are supported

Requirements: 
    vim compiled with python support

============================================================================================
 2. CONFIGURATION                                         *shellasync.vim-configuration*

                                                         *g:shellasync_print_return_value*
g:shellasync_print_return_value     (Default: '1')
    Print command's return value when command finishes it's execution

============================================================================================
 2. USAGE                                                         *shellasync.vim-usage*

                                                                  *Shell*
:Shell[!] {command}
    Execute a {command} in shell and opens a window to see it's output.
    If [!] is specified, command is expanded using |expand()| function before execution
    Buffer name is the same as {command} you've executed
    If same {command} is currently open in it's dedicated window it switches to 
    that window instead opening new one, if you want new window use |ShellNew|
    If previously executed {command} is running it automaticly does
    |ShellTerm| of that {command} and |ShellDelete| the remaining shell process
    Note: each command {command} opens a buffer window with same name as
    command and when this buffer is deleted the associated process id receives
    |ShellTerm| and |ShellDelete| commands

                                                                  *ShellNew*
:ShellNew[!] {command}
    Same as |Shell| only opens each same {command} in new window each time

                                                                  *ShellList*
:ShellList
    Opens a new window buffer with a list of currently running and finished
    shell processes. You can move your cursor over the the process line and 
    press t to send SIGTERM signal to that process, press K to send SIGKILL 
    signal to that process and press x or d to delete shell process from list 

                                                                  *ShellTerm*
:ShellTerm [pid]
    If shell process with {pid} is currently running, send a SIGTERM signal

                                                                  *ShellKill*
:ShellKill [pid]
    If shell process with {pid} is currently running, send a SIGKILL signal

                                                                  *ShellDelete*
:ShellDelete [pid]
    If shell process with {pid} finished executing, remove it from shell
    process list

 vim:tw=78:ts=8:ft=help:norl:
